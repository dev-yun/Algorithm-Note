# 여러 노드가 있을 때, 측정한 노드에서 출발하여 다른 노드로 가는 각각의 최단경로를 구해주는 알고리즘 (음의 간선)이 없을때 정상적으로 작동한다. 그래서 현실세계의 길을 토대로 gps등에 주로 쓰이는 알고리즘이다.
# 기본적으로 가장 비용이 적은 노드를 찾아 갱신하므로 그리드 알고리즘으로 분류된다
# 알고리즘의 원리로는 
'''1. 출발 노드를 설정 
   2. 최단 거리 테이블을 초기화 
   3. 방문하지 않은 노드 중에서 최단거리가 가장 짧은 노드를 선택 
   4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신
   5. 위 과정에서 3과 4를 반복 '''     # 한단계를 완료하면 그 단계의 노드는 최단거리가 확실히 구해진것이다.
   
# 간단한 다익스트라 알고리즘은 O(v^2)의 시간복잡도를 가지는데 이때 v는 노드의 개수이다.
# 다익스트라는 최단 경로를 구하는 알고리즘이지만 보통 코딩테스트에서는 최단 거리를 요구하므로 최단 거리는 구하는 알고리즘을 공부한다.

import sys
input = sys.stdin.readline    # 입력데이터가 많다는 가정하에 빠른 입력을 받는 내장함수 사용
INF = int(1e9)  #무한을 나타내는 값으로 10억 설정

n, m = map(int, input().split())   #노드의 개수, 간선의 개수
start = int(input())    # 시작 노드번호
graph = [[] for i in range(n + 1)]  # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트
visited = [False] * (n + 1)   # 방문한 적이 있는지 체크하는 목적의 리스트 만들기
distance = [INF] * (n + 1)   # 최단 거리 테이블을 모두 무한대로 초기화

for _ in range(m):           # 노드들 사이의 연결 유무와 간선의 비용 입력
  a, b, c = map(int, input().split())
  graph[a].append((b,c))   # a번 노드에서 b번 노드로 가는비용이 c라는 의미

def get_smallest_node():    # 방문하지 않은 노드 중에서, 가장 최단거리가 짧은 노드의 번호 반환
  min_value = INF
  index = 0   # 가장 최단거리가 짧은 노드(인덱스)
  for i in range(1, n + 1):
    if distance[i] < min_value and not visited[i]:    # 만약 distance[i] < INF이고 visited가 True이면 
      min_value = distance[i]
      index = i
  return index

def dijkstra(start):
  distance[start] = 0
  visited[start] = True
  for j in graph[start]:    # j[0] = 노드, j[1] = 비용 (즉 start와 연결된 노드(distance[노드])의 비용을 업데이트)
    distance[j[0]] = j[1]
  for i in range(n - 1):    # 시작노드를 제외한 n-1개의 노드에 대해 반복
    now = get_smallest_node()   # 현재 최단 거리가 가장 짧은 노드를 꺼내어
    visited[now] = True   # 방문처리 False -> True
    for j in graph[now]:    # 현재 노드와 연결된 다른 노드를 확인
      cost = distance[now] + j[1]
      if cost < distance[j[0]]:   # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우 처리
        distance[j[0]] = cost

dijkstra(start)   # 다익스트라 알고리즘 실행

for i in range(1, n + 1):   # 모든 노드로 가기위한 최단 거리를 출력
  if distance[i] == INF:    # 도달 불가능 할 경우 무한대 출력 
    print('INFINITY')
  else:                     # 도달 가능한 경우 거리 출력
    print(distance[i])

