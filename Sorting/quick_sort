# 퀵정렬은 삽입정렬과 다르게 '이미 데이터가 거의 정렬된 경우' 시간복잡도가 거의 O(n^2)으로 매우 느리게 동작한다.
# 하지만 데이터가 무작위로 입력되는 경우 O(nlogn)의 속도로 매우 빠르게 동작한다. 그러므로 데이터의 상태를 보고 삽입정렬과 잘 선택하여 사용해야한다.

import random

array = [random.randint(1,10) for col in range(10)]
print(array)

def quick_sort(array, start, end):
  if start >= end:        # 아래 재귀함수에서 모든 정렬이 끝나고 원소가 1개인 경우 종료
    return
  pivot = start
  left = start + 1
  right = end
  while left <= right:
    while left <= end and array[left] <= array[pivot]:
      left += 1
    while right > start and array[right] >= array[pivot]:
      right -= 1
    if left > right:      # left와 right가 교차할때 작은값(right(엇갈렸으므로))과 pivot 교체
      array[right], array[pivot] = array[pivot], array[right]
    else:     # 만약 교차하지 않았다면 left와 right 교체
      array[left], array[right] = array[right], array[left]
      
  quick_sort(array, start, right - 1)   # pivot 기준 왼쪽
  quick_sort(array, right + 1, end)     # pivot 기준 오른쪽 재귀함수를 통해 다시 정렬

quick_sort(array, 0, len(array) - 1)
print(array)
