# 위상 정렬은 순서가 정해져 있는 일련의 작업을 차례대로 수행해야 할 때 사용할 수 있는 알고리즘이다. (교과 과정을 예로 들수 있다. 수1 - 수2 - 기하&벡터 와 같은 순서가 필요한 작업들)
# 즉 방향 그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열하는 것'이다.
'''위상 정렬 알고리즘에는 진입차수(Indegree)가 있다. 진입차수란 특정 노드로 들어오는 간선의 개수를 의미하며 
   위에서 예를든 기하와 벡터는 수1, 수2라는 2개의 선수과목 노드가 있다. 이는 진입차수가 2인것으로 표현할 수있다.'''
   
'''위상 정렬 알고리즘의 과정을 보면
   1. 진입차수가 0인 노드를 큐에 넣는다.
   2. 큐가 빌 때까지 다음의 과정을 반복한다.
     2.1 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거한다.
     2.2 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.'''        
# 일련의 과정을 수행하는 중간에 큐가 빈다면 사이클이 존재한다고 판단할 수 있다 (사이클이 발생할 경우 사이클이 포함되어 있는 원소 중 어떠한 원소도 큐에 들어가지 못하기 때문에)
# 위상 정렬의 시간복잡도 O(V+E) (모든 노드와 모든 간선을 확인하므로) 


from collections import deque

v, e = map(int, input().split())   #노드의 개수와 간선의 개수를 입력
indegree = [0] * (v + 1)           # 모든 노드에 대한 진입차수를 0로 초기화  indegree[0]은 비우고 indegree[1]부터 indegree[v]까지 사용 (그래서 크기를 v+1로 잡음)
graph = [[] for i in range(v + 1)]  # 각 노드에 연결된 간선 정보를 담기 의한 리스트 초기화

for _ in range(e):
  a, b = map(int, input().split())  # 연결된 노드 입력 (a -> b)
  graph[a].append(b)    # 노드 a에서 b로 이동 가능
  indegree[b] += 1      # b의 진입차수를 1 증가

def topology_sort(): # 위상 정렬 함수
  result = []           # 알고리즘 수행 결과를 담을 리스트
  q = deque()           # 큐를 사용하기 위해 deque 라이브러리 실행 

  for i in range(1, v + 1):
    if indegree[i] == 0:
      q.append(i)           # 진입차수가 0일때 큐에 담음

  while q:      # 큐가 빌때까지 반복
    now = q.popleft()     # now 변수에 담겨져 있는 q를 꺼냄
    result.append(now)
    
    for i in graph[now]:  # graph[now]에는 현재 큐에 들어있는 노드와 연결된 노드들이 들어있다. now가 1이고 2와 5가 연결될경우 graph[now] = [2, 5]
      indegree[i] -= 1
      if indegree[i] == 0:
        q.append(i)

  for i in result:
    print(i, end = ' ')

topology_sort()   # 위상 정렬 함수 실행
     
     

