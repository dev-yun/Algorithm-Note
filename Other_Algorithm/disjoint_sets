'''서로소 집합(disjoint_sets)이란 공통원소가 없는 두 집합을 의미하며 
   서로소 집합 자료구조란 서로소 부분집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조 이다.
   서로소 집합 자료구조는 union(합집합), find(찾기) 이 2개의 연산으로 조작할 수 있다. (스택과 큐가 push, pop 연산으로 이루어졌던것 처럼)'''
   
'''서로소 집합 자료구조는 트리 자료구조를 이용하여 집합을 표현하는데, 트리 자료구조를 이용해 서로소 집합 계산을 하는 알고리즘은 다음과 같다.
   1. union(합집합) 연산을 확인하여, 서로 연결된 두 노드 A,B를 확인한다.
      1.1 A와 B의 루트 노드 A',B'를 각각 찾는다.
      1.2 A'를 B'의 부모 노드로 설정한다(B'가 A'를 가리키도록 한다.)
   2. 모든 union 연산을 처리할 때까지 1번 과정을 반복한다.
   
   실제 구현할때에는 A'와 B'중에서 더 번호가 작은 원소가 부모 노드가 되도록 구현하는 경우가 많으므로, 그런식으로 구현하겠다.
   A' = 1 이고 B' = 3 일때 B'가 A'를 가리키도록 설정한다. (가리킨다는 것은 부모 노드로 설정한다는 의미 이다. ( 부모 자식은 간선으로 연결하는 형태로 그래프 표현 )'''
   
 # 알고리즘 구형
 
 
 def find_parent(parent, x):     # 특정 원소(같은 루트 노드를 가진)가 속한 집합을 찾기                # 모든 노드를 확인해야해서 비효율적임
  if parent[x] != x:    # 루트 노드가 아니라면 루트 노드를 찾을때 까지 재귀적으로 호출
    return find_parent(parent, parent[x])
  return x

def union_parent(parent, a, b):   # 두 원소가 속한 집합을 합치기
  a = find_parent(parent, a)      # a를 루트 노드로
  b = find_parent(parent, b)      # b를 루트 노드로
  if a < b:         # 만약 a가 작으면
    parent[b] = a   # b의 루트 노드를 a로 바꿈
  else:
    parent[a] = b   # 반대면 a를 b로

v, e = map(int, input().split())     # 노드의 개수 v, 간선의 수 e
parent = [0] * (v + 1)               # 부모 테이블 초기화

for i in range(1, v + 1):       # 부모를 자기 자신으로 초기화
  parent[i] = i

for i in range(e):              # 간선의 수만큼 노드들에 서로 union연산 수행
  a, b = map(int, input().split())
  union_parent(parent, a, b)

print('각 원소가 속한 집합: ', end = ' ')
for i in range(1, v + 1):         # 전체 노드에 대해 루트 노드를 찾는 함수 실행
  print(find_parent(parent, i), end=' ')
print()

print('부모 테이블:' , end = ' ')
for i in range(1, v + 1):         # 부모 테이블을 찾는 연산
  print(parent[i], end = ' ')
