# 서로소 집합을 활용한 사이클 판별
'''서로소 집합은 무방향 그래프 내에서 사이클을 판별할 때 사용할 수 있다는 특징이 있다. 과정으로는
   1. 각 간선을 확인하며 두 노드의 루트 노드를 확인한다.
      1.1 루트 노드가 서로 다르다면 두 노드에 대하여 union연산을 수행한다.
      1.2 루트 노드가 서로 같다면 사이클(Cycle)이 발생한 것이다.
   2. 그래프에 포함되어 있는 모든 간선에 대하여 1번 과정을 반복한다.'''


def find_parent(parent, x):
  if parent[x] != x:
    parent[x] = find_parent(parent, parent[x])
  return parent[x]

def union_parent(parent, a, b):   # 두 원소가 속한 집합을 합치기
  a = find_parent(parent, a)      # a를 루트 노드로
  b = find_parent(parent, b)      # b를 루트 노드로
  if a < b:         # 만약 a가 작으면
    parent[b] = a   # b의 루트 노드를 a로 바꿈
  else:
    parent[a] = b   # 반대면 a를 b로

v, e = map(int, input().split())     # 노드의 개수 v, 간선의 수 e
parent = [0] * (v + 1)               # 부모 테이블 초기화

for i in range(1, v + 1):       # 부모를 자기 자신으로 초기화
  parent[i] = i

cycle = False      # 사이클 발생 여부

for i in range(e):              # 간선의 수만큼 노드들에 서로 union연산 수행
  a, b = map(int, input().split())
  if find_parent(parent, a) == find_parent(parent, b):    # 사이클이 발생할 경우 종료
    cycle = True
    break
  else: # 사이클이 발생하지 않을 경우 합집합(union) 수행
    union_parent(parent, a, b)

if cycle:
  print('사이클이 발생 하였습니다.')
else:
  print('사이클이 발생하지 않았습니다.')
